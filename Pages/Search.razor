@page "/search/{SearchQuery}"

<PageTitle>Search</PageTitle>

<h1>Search for a movie</h1>

<style>
    body {
        background-image: linear-gradient(180deg, rgb(5, 39, 103) 0%, #3a0647 70%);
        color: #fff; 
    }

    .search-container {
        margin-top: 20px;
    }

    .search-input {
        background-color: rgba(255, 255, 255, 0.1); 
        color: #fff; 
        border: none;
        border-radius: 5px;
        padding: 10px;
        margin-right: 10px;
        width: 200px;
    }

    .search-input::placeholder {
        color: #ccc;    
    }

    .search-button {
        background-color: rgba(255, 255, 255, 0.1); 
        color: #fff; 
        border: none;
        border-radius: 5px;
        padding: 10px 20px;
        cursor: pointer;
    }

    .search-button:hover {
        background-color: rgba(255, 255, 255, 0.2); 
    }

    .movie-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-around;
    }

    .movie-card {
        width: 300px;
        margin: 20px;
        padding: 15px;
        border: 1px solid #ccc;
        border-radius: 5px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        transition: box-shadow 0.3s ease;
        background-color: rgba(0, 0, 0, 0.5); 
    }

    .movie-card:hover {
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
    }

    .movie-info h2 {
        margin-top: 0;
        color: #fff;
    }

    .movie-info p {
        margin: 5px 0;
        color: #ccc;
    }
</style>

<div class="search-container">
    <input type="text" class="search-input" @bind="SearchQuery" placeholder="Search...">
    <button class="search-button" @onclick="PerformSearch">Search</button>
</div>

@if (MovieInfos != null)
{
    @if (MovieInfos.Any())
    {
        <div class="movie-container">
            @foreach (var movieInfo in MovieInfos)
            {
                <div class="movie-card">
                    <div class="movie-info">
                        <h2>@movieInfo.Title</h2>
                        <p><strong>Year:</strong> @movieInfo.Year</p>
                        <p><strong>Plot:</strong> @movieInfo.Plot.Substring(0, Math.Min(@movieInfo.Plot.Length, 100))</p>
                        <p><strong>Rated:</strong> @movieInfo.Rated</p>
                        <p><strong>Runtime:</strong> @movieInfo.Runtime</p>
                        <p><strong>Awards:</strong> @movieInfo.Awards</p>
                        <p><strong>Box Office:</strong> @movieInfo.BoxOffice</p>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <p>No movies found.</p>
    }
}

@code {
    [Parameter]
    public string SearchQuery { get; set; }

    private List<MovieInfo> MovieInfos { get; set; } = new List<MovieInfo>();

    
    [Inject]
    public HttpClient HttpClient { get; set; }

    private OMDBService omdbService;

    protected override async Task OnInitializedAsync()
    {
        omdbService = new OMDBService(HttpClient, "9275f68f");

        if (!string.IsNullOrWhiteSpace(SearchQuery))
        {
            MovieInfos = await omdbService.SearchMoviesAsync(SearchQuery);
        }
    }

    private async Task PerformSearch()
    {
        if (!string.IsNullOrWhiteSpace(SearchQuery))
        {
            MovieInfos = await omdbService.SearchMoviesAsync(SearchQuery);
        }
        else
        {
            MovieInfos.Clear();
        }
    }
}